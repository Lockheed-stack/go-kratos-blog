// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package users

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsErrUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERR_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorErrUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_ERR_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsErrInvalidUserName(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERR_INVALID_USER_NAME.String() && e.Code == 400
}

func ErrorErrInvalidUserName(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERR_INVALID_USER_NAME.String(), fmt.Sprintf(format, args...))
}

func IsErrUserPreExisting(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERR_USER_PRE_EXISTING.String() && e.Code == 400
}

func ErrorErrUserPreExisting(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERR_USER_PRE_EXISTING.String(), fmt.Sprintf(format, args...))
}

func IsErrUserForeignKeyConstraint(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERR_USER_FOREIGN_KEY_CONSTRAINT.String() && e.Code == 400
}

func ErrorErrUserForeignKeyConstraint(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERR_USER_FOREIGN_KEY_CONSTRAINT.String(), fmt.Sprintf(format, args...))
}

func IsErrUserInvalidRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERR_USER_INVALID_REQUEST.String() && e.Code == 400
}

func ErrorErrUserInvalidRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERR_USER_INVALID_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsErrUserUsernamePasswordWrong(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERR_USER_USERNAME_PASSWORD_WRONG.String() && e.Code == 400
}

func ErrorErrUserUsernamePasswordWrong(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERR_USER_USERNAME_PASSWORD_WRONG.String(), fmt.Sprintf(format, args...))
}
