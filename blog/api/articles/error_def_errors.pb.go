// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package articles

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsErrArticleNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_ERR_ARTICLE_NOT_EXIST.String() && e.Code == 404
}

func ErrorErrArticleNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ArticleErrorReason_ERR_ARTICLE_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsErrArticleInvalidIdOrTitle(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_ERR_ARTICLE_INVALID_ID_OR_TITLE.String() && e.Code == 400
}

func ErrorErrArticleInvalidIdOrTitle(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_ERR_ARTICLE_INVALID_ID_OR_TITLE.String(), fmt.Sprintf(format, args...))
}

func IsSuccess(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_SUCCESS.String() && e.Code == 200
}

func ErrorSuccess(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ArticleErrorReason_SUCCESS.String(), fmt.Sprintf(format, args...))
}
