// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.3
// source: api/chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chat_ServerStreamAIChat_FullMethodName    = "/api.chat.Chat/ServerStreamAIChat"
	Chat_AIPaint_FullMethodName               = "/api.chat.Chat/AIPaint"
	Chat_AISummarizationStream_FullMethodName = "/api.chat.Chat/AISummarizationStream"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	ServerStreamAIChat(ctx context.Context, in *AIChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AIChatReply], error)
	AIPaint(ctx context.Context, in *AIPaintRequest, opts ...grpc.CallOption) (*AIPaintReply, error)
	AISummarizationStream(ctx context.Context, in *AISummarizationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AISummarizationReply], error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) ServerStreamAIChat(ctx context.Context, in *AIChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AIChatReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], Chat_ServerStreamAIChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AIChatRequest, AIChatReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_ServerStreamAIChatClient = grpc.ServerStreamingClient[AIChatReply]

func (c *chatClient) AIPaint(ctx context.Context, in *AIPaintRequest, opts ...grpc.CallOption) (*AIPaintReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIPaintReply)
	err := c.cc.Invoke(ctx, Chat_AIPaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AISummarizationStream(ctx context.Context, in *AISummarizationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AISummarizationReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], Chat_AISummarizationStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AISummarizationRequest, AISummarizationReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_AISummarizationStreamClient = grpc.ServerStreamingClient[AISummarizationReply]

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility.
type ChatServer interface {
	ServerStreamAIChat(*AIChatRequest, grpc.ServerStreamingServer[AIChatReply]) error
	AIPaint(context.Context, *AIPaintRequest) (*AIPaintReply, error)
	AISummarizationStream(*AISummarizationRequest, grpc.ServerStreamingServer[AISummarizationReply]) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServer struct{}

func (UnimplementedChatServer) ServerStreamAIChat(*AIChatRequest, grpc.ServerStreamingServer[AIChatReply]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamAIChat not implemented")
}
func (UnimplementedChatServer) AIPaint(context.Context, *AIPaintRequest) (*AIPaintReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIPaint not implemented")
}
func (UnimplementedChatServer) AISummarizationStream(*AISummarizationRequest, grpc.ServerStreamingServer[AISummarizationReply]) error {
	return status.Errorf(codes.Unimplemented, "method AISummarizationStream not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}
func (UnimplementedChatServer) testEmbeddedByValue()              {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	// If the following call pancis, it indicates UnimplementedChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_ServerStreamAIChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AIChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).ServerStreamAIChat(m, &grpc.GenericServerStream[AIChatRequest, AIChatReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_ServerStreamAIChatServer = grpc.ServerStreamingServer[AIChatReply]

func _Chat_AIPaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIPaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AIPaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AIPaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AIPaint(ctx, req.(*AIPaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AISummarizationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AISummarizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).AISummarizationStream(m, &grpc.GenericServerStream[AISummarizationRequest, AISummarizationReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_AISummarizationStreamServer = grpc.ServerStreamingServer[AISummarizationReply]

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AIPaint",
			Handler:    _Chat_AIPaint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamAIChat",
			Handler:       _Chat_ServerStreamAIChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AISummarizationStream",
			Handler:       _Chat_AISummarizationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/chat/chat.proto",
}
